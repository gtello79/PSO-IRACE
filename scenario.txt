###################################################### -*- mode: r -*- #####
## Scenario setup for Iterated Race (iRace).
############################################################################

## To use the default value of a parameter of iRace, simply do not set
## the parameter (comment it out in this file, and do not give any
## value on the command line).


## File that contains the description of the parameters.
parameterFile = "parameters.txt"
configurationsFile = "default.txt"
forbiddenFile = "forbidden.txt"

## Directory where the programs will be run.
execDir = "."

## Directory where tuning instances are located, either absolute path or
## relative to current directory.
trainInstancesDir = ""
trainInstancesFile = "instances/train_instances.txt"

## Set testing data 
testInstancesDir = ""
testInstancesFile = "instances/test_instances.txt"
testNumElites = 90

## The maximum number of runs (invocations of targetRunner) that will performed. It
## determines the (maximum) budget of experiments for the tuning.
maxExperiments = 600

## Number of CPU cores to use
parallel = 4

## A value of 0 silences all debug messages. Higher values provide
## more verbose debug messages.
debugLevel = 10


## R function that executes the target algorithm
targetRunner = function (experiment, scenario) {
  suppressMessages(require("stringr"))

  # Target algorithm executable   
  exe = "com.company.Main"

  # Extracting experiment information  
  candidate_id  = experiment$id.configuration
  instance_id   = experiment$id.instance
  seed          = experiment$seed 
  instance_name = experiment$instance

  # Define fixed parameters (budget or other options)
  fixed_params = "-classpath ./production/PSO:$LD_LIBRARY_PATH/gurobi.jar com.company.Main"

  # Create parameter arguments for command line
  parameters    = buildCommandLine(experiment$configuration, experiment$switches)

  # Create command line
  command_line = paste (fixed_params, "i", instance_name, parameters, sep=" ")

  # Execute command
  output = system2(command="java", args=command_line, stdout=TRUE, stderr=TRUE)

  # Check if error!    
  if (!is.null(attr(output, "status"))) {
    cat ("\nError executing: ", exe, command_line, "\n")
    cat (output, "\n\n")
    stop()
  }

  # Parse output 
  sel = which(sapply(output, grep, pattern="-- Best Fitness:", ignore.case = FALSE, value=FALSE) == 1)
  
  # Parse the solution with the label
  x = str_split(output[sel],":" )[[1]][2]
  # Parse the value with the whitespace
  y = str_split(x, "\\s")[[1]][2]
  # Convert the string on a float
  result = as.numeric(y)

  # Return result 
  # Result should be a list with elements cost and time (optional)
  return(list(cost=result))

}


## END of scenario file
############################################################################
